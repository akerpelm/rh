/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    media: Media;
    'run-clubs': RunClub;
    boroughs: Borough;
    neighborhoods: Neighborhood;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    'run-clubs': RunClubsSelect<false> | RunClubsSelect<true>;
    boroughs: BoroughsSelect<false> | BoroughsSelect<true>;
    neighborhoods: NeighborhoodsSelect<false> | NeighborhoodsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  username: string;
  profilePicture?: (number | null) | Media;
  bio?: string | null;
  favoriteRunClubs?: (number | RunClub)[] | null;
  submittedContent?: {
    /**
     * This section will automatically track content submitted by this user
     */
    note?: string | null;
  };
  socialMedia?: {
    instagram?: string | null;
    facebook?: string | null;
    twitter?: string | null;
    tiktok?: string | null;
    strava?: string | null;
  };
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "run-clubs".
 */
export interface RunClub {
  id: number;
  name: string;
  /**
   * Auto-generated from name
   */
  slug?: string | null;
  description: string;
  borough: number | Borough;
  primaryNeighborhood?: (number | null) | Neighborhood;
  schedule?:
    | {
        day: 'monday' | 'tuesday' | 'wednesday' | 'thursday' | 'friday' | 'saturday' | 'sunday';
        time: string;
        meetingLocation: {
          name: string;
          address: string;
          neighborhood: number | Neighborhood;
          coordinates?: {
            latitude?: string | null;
            longitude?: string | null;
          };
        };
        runType: 'easy' | 'long' | 'workout' | 'recovery' | 'shakeout' | 'race-pace' | 'hills' | 'track' | 'social';
        distance?: {
          min?: number | null;
          max?: number | null;
        };
        pace?: {
          /**
           * Format: MM:SS (e.g., 08:30)
           */
          min?: string | null;
          /**
           * Format: MM:SS (e.g., 09:30)
           */
          max?: string | null;
        };
        details?: string | null;
        requiresRSVP?: boolean | null;
        maxParticipants?: number | null;
        /**
         * Optional route information for this run
         */
        route?: {
          name?: string | null;
          distance?: number | null;
          mapProvider?: ('onthego' | 'strava' | 'mapmyrun') | null;
          /**
           * Full URL to the route map
           */
          mapUrl?: string | null;
        };
        id?: string | null;
      }[]
    | null;
  contactInformation?: {
    email?: string | null;
    phone?: string | null;
  };
  website?: string | null;
  membershipRequirements?: string | null;
  socialMedia?: {
    instagram?: string | null;
    facebook?: string | null;
    twitter?: string | null;
    tiktok?: string | null;
    strava?: string | null;
  };
  logo?: (number | null) | Media;
  /**
   * Hex color code (e.g., #FF5733)
   */
  brandColor?: string | null;
  /**
   * Records are maintained separately for men, women, and non-binary athletes
   */
  clubRecords?:
    | {
        athleteName: string;
        category: 'men' | 'women' | 'non-binary';
        event: 'mile' | '5k' | '10k' | 'half' | 'marathon';
        /**
         * Format: HH:MM:SS
         */
        time: string;
        date?: string | null;
        eventName?: string | null;
        id?: string | null;
      }[]
    | null;
  gallery?:
    | {
        image: number | Media;
        caption?: string | null;
        featured?: boolean | null;
        category?: ('runs' | 'social' | 'race' | 'community') | null;
        id?: string | null;
      }[]
    | null;
  clubCulture?: {
    postRunTraditions?: ('coffee' | 'breakfast' | 'stretch' | 'social')[] | null;
    atmosphere?:
      | ('no-drop' | 'pace-groups' | 'all-levels' | 'beginner' | 'photos' | 'dog-friendly' | 'stroller')[]
      | null;
    customTraditions?:
      | {
          name: string;
          id?: string | null;
        }[]
      | null;
  };
  partnerBusinesses?:
    | {
        businessName: string;
        /**
         * URL to the business website
         */
        businessURL?: string | null;
        /**
         * URL to the partnerships on your website
         */
        internalURL?: string | null;
        type: 'running-store' | 'brand' | 'coffee' | 'pt' | 'restaurant' | 'gym' | 'other';
        perks?: string | null;
        location?: {
          address?: string | null;
          neighborhood?: (number | null) | Neighborhood;
        };
        id?: string | null;
      }[]
    | null;
  routes?:
    | {
        name: string;
        distance?: number | null;
        description?: string | null;
        stravaLink?: string | null;
        difficulty?: ('easy' | 'moderate' | 'hard') | null;
        terrain?: ('road' | 'trail' | 'track' | 'hills')[] | null;
        mapImage?: (number | null) | Media;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "boroughs".
 */
export interface Borough {
  id: number;
  name: string;
  /**
   * URL-friendly version of the name (e.g., "manhattan")
   */
  slug: string;
  neighborhoods?: (number | Neighborhood)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "neighborhoods".
 */
export interface Neighborhood {
  id: number;
  name: string;
  /**
   * URL-friendly version of the name (e.g., "upper-east-side")
   */
  slug: string;
  borough: number | Borough;
  runningSpots?:
    | {
        name: string;
        description?: string | null;
        location: {
          latitude: string;
          longitude: string;
          address: string;
        };
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'users';
        value: number | User;
      } | null)
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null)
    | ({
        relationTo: 'run-clubs';
        value: number | RunClub;
      } | null)
    | ({
        relationTo: 'boroughs';
        value: number | Borough;
      } | null)
    | ({
        relationTo: 'neighborhoods';
        value: number | Neighborhood;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  username?: T;
  profilePicture?: T;
  bio?: T;
  favoriteRunClubs?: T;
  submittedContent?:
    | T
    | {
        note?: T;
      };
  socialMedia?:
    | T
    | {
        instagram?: T;
        facebook?: T;
        twitter?: T;
        tiktok?: T;
        strava?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "run-clubs_select".
 */
export interface RunClubsSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  description?: T;
  borough?: T;
  primaryNeighborhood?: T;
  schedule?:
    | T
    | {
        day?: T;
        time?: T;
        meetingLocation?:
          | T
          | {
              name?: T;
              address?: T;
              neighborhood?: T;
              coordinates?:
                | T
                | {
                    latitude?: T;
                    longitude?: T;
                  };
            };
        runType?: T;
        distance?:
          | T
          | {
              min?: T;
              max?: T;
            };
        pace?:
          | T
          | {
              min?: T;
              max?: T;
            };
        details?: T;
        requiresRSVP?: T;
        maxParticipants?: T;
        route?:
          | T
          | {
              name?: T;
              distance?: T;
              mapProvider?: T;
              mapUrl?: T;
            };
        id?: T;
      };
  contactInformation?:
    | T
    | {
        email?: T;
        phone?: T;
      };
  website?: T;
  membershipRequirements?: T;
  socialMedia?:
    | T
    | {
        instagram?: T;
        facebook?: T;
        twitter?: T;
        tiktok?: T;
        strava?: T;
      };
  logo?: T;
  brandColor?: T;
  clubRecords?:
    | T
    | {
        athleteName?: T;
        category?: T;
        event?: T;
        time?: T;
        date?: T;
        eventName?: T;
        id?: T;
      };
  gallery?:
    | T
    | {
        image?: T;
        caption?: T;
        featured?: T;
        category?: T;
        id?: T;
      };
  clubCulture?:
    | T
    | {
        postRunTraditions?: T;
        atmosphere?: T;
        customTraditions?:
          | T
          | {
              name?: T;
              id?: T;
            };
      };
  partnerBusinesses?:
    | T
    | {
        businessName?: T;
        businessURL?: T;
        internalURL?: T;
        type?: T;
        perks?: T;
        location?:
          | T
          | {
              address?: T;
              neighborhood?: T;
            };
        id?: T;
      };
  routes?:
    | T
    | {
        name?: T;
        distance?: T;
        description?: T;
        stravaLink?: T;
        difficulty?: T;
        terrain?: T;
        mapImage?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "boroughs_select".
 */
export interface BoroughsSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  neighborhoods?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "neighborhoods_select".
 */
export interface NeighborhoodsSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  borough?: T;
  runningSpots?:
    | T
    | {
        name?: T;
        description?: T;
        location?:
          | T
          | {
              latitude?: T;
              longitude?: T;
              address?: T;
            };
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}